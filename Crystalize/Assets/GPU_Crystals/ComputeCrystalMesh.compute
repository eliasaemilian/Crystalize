// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain


#define TAU 6.28318530718;
#define PI 3.14159265359;


struct Crystal
{
    float radius;
    float length; // do random calcs on cpu
    float segments; // do random calcs on cpu
    float pointiness;
    float3 offset; 
    int verticesCount;
    int indicesCount;
    float3 debugCol;
    float2 rot;
};

struct Vert
{
    float3 pos;
    float2 uv;
    float3 normal;
    float3 debugCol;
};

 
void RandomRange( float2 Seed, float Min, float Max, out float Out )
{
    float randomno = frac( sin( dot( Seed, float2( 12.9898, 78.233 ) ) ) * 43758.5453 );
    Out = lerp( Min, Max, randomno );
}

float3x3 XRotationMatrix( float sina, float cosa )
{
    return float3x3(
                   1, 0, 0,
                   0, cosa, -sina,
                   0, sina, cosa 
                   );
}

float3x3 ZRotationMatrix( float sina, float cosa )
{
    return float3x3(
                   cosa, -sina, 0,
                   sina, cosa, 0,
                   0, 0, 1
                   );
}

float3 RotateAroundXInDegrees( float3 vertex, float degrees )
{
    float pi = PI;
    float alpha = degrees * pi / 180.0;
    float sina, cosa;
    sincos( alpha, sina, cosa );
    return mul( XRotationMatrix( sina, cosa ), vertex.xyz ); 
}

float3 RotateAroundZInDegrees( float3 vertex, float degrees )
{
    float pi = PI;
    float alpha = degrees * pi / 180.0;
    float sina, cosa;
    sincos( alpha, sina, cosa );
    return mul( ZRotationMatrix( sina, cosa ), vertex.xyz );
}




RWStructuredBuffer<float3> VerticesBuffer;
RWStructuredBuffer<float2> UvsBuffer;
RWStructuredBuffer<uint> IndicesBuffer;
RWStructuredBuffer<Vert> VertOutputBuffer;


StructuredBuffer<Crystal> CrystalInfoBuffer;

void GenerateCrystal(Crystal c, int offsetCount, int offsetVerts)
{
    // compute vertices
    for ( uint i = 0; i < ( uint ) c.length; i++ )
    {
        for ( uint j = 0; j < ( uint ) c.segments; j++ )
        {
            float3 vertPos = float3( 0, 0, 0 );

            if ( i == ( uint ) c.length - 1 ) // TODO: get rid of branching
            {
                vertPos = float3( 0, 0, 0 );
                vertPos.y += i + c.pointiness;
            }
            else
            {
                float t = saturate( j / c.segments );
                float angRad = t * TAU;
                float2 dir = float2( cos( angRad ), sin( angRad ) );

                vertPos.xz = dir * c.radius;
                vertPos.y += i;
            
            }
            
            // apply rotation
            vertPos = RotateAroundXInDegrees( vertPos, c.rot.x );
            vertPos = RotateAroundZInDegrees( vertPos, c.rot.y );

            // set buffers
            VerticesBuffer[offsetVerts + ( ( i * ( uint ) c.segments + j ) * 2 ) + 0] = c.offset + vertPos;
            VerticesBuffer[offsetVerts + ( ( i * ( uint ) c.segments + j ) * 2 ) + 1] = c. offset + vertPos;
            
            float v = vertPos.y / ( c.length + c.pointiness );
            float u = j / c.segments;
            
            UvsBuffer[offsetVerts + ( ( i * ( uint ) c.segments + j ) * 2 )  + 0] = float2( u, v );
            UvsBuffer[offsetVerts + ( ( i * ( uint ) c.segments + j ) * 2 )  + 1] = float2( u, v );
        }
        
    }

    // compute indices
    for ( i = 0; i < ( uint ) c.length - 1; i++ )
    {
        for ( uint j = 0; j < ( ( uint ) c.segments * 2 ) - 2; j += 2 )
        {
            uint root = offsetVerts + ( i * ( ( c.segments * 2 ) ) + j );
            uint rootNext = offsetVerts + ( i * ( ( c.segments * 2 ) ) ) + j + ( c.segments * 2 );

            uint count = offsetCount + ( ( 6 * i ) + ( i * ( uint ) ( ( c.segments * 2 ) - 2 ) + j ) * 3 );
            
            IndicesBuffer[count + 0] = rootNext;
            IndicesBuffer[count + 1] = root + 2;
            IndicesBuffer[count + 2] = root;
            
            IndicesBuffer[count + 3] = rootNext;
            IndicesBuffer[count + 4] = rootNext + 2;
            IndicesBuffer[count + 5] = root + 2;
        }

        uint count = offsetCount + ( 6 * i ) + ( i * ( uint ) ( ( c.segments * 2 ) - 2 ) + ( ( c.segments * 2 ) - 2 ) ) * 3;
        
        IndicesBuffer[count + 0] = offsetVerts + ( ( i + 1 ) * ( c.segments * 2 ) ) + ( c.segments * 2 ) - 2;
        IndicesBuffer[count + 1] = offsetVerts + ( i * ( c.segments * 2 ) ) + ( c.segments * 2 );
        IndicesBuffer[count + 2] = offsetVerts + ( i * ( c.segments * 2 ) );
        
        IndicesBuffer[count + 3] = offsetVerts + ( ( i + 1 ) * ( c.segments * 2 ) ) + ( c.segments * 2 ) - 2;
        IndicesBuffer[count + 4] = offsetVerts + ( i * ( c.segments * 2 ) );
        IndicesBuffer[count + 5] = offsetVerts + ( i * ( c.segments * 2 ) ) + ( c.segments * 2 ) - 2;
              
    }
    
    
    // PUT TOGETHER HERE !!!!
    
}



[numthreads(1,1,1)]
void CSMain( uint3 id : SV_DispatchThreadID, uint index : SV_GroupIndex)
{
    //Crystal c = CrystalInfoBuffer[id.x];
    
    //if ( index > ( uint ) _VertCount )
    //    return;
    int offsetCount = 0;
    int offsetVerts = 0;
    uint crystalCount = 0;
    uint stride = 0;
    CrystalInfoBuffer.GetDimensions( crystalCount, stride);
    // for like id.x < index generate crystal feed it id offset idk figure it out cunt <- bitch I did
    for ( uint i = 0; i < crystalCount; ++i )
    {
        GenerateCrystal( CrystalInfoBuffer[i], offsetCount, offsetVerts);
        
        for ( uint k = ( uint ) offsetCount; k < offsetCount + ( uint ) CrystalInfoBuffer[i].indicesCount; ++k )
        {
            VertOutputBuffer[k].pos = VerticesBuffer[IndicesBuffer[k]];
            VertOutputBuffer[k].uv = UvsBuffer[IndicesBuffer[k]];
            VertOutputBuffer[k].debugCol = CrystalInfoBuffer[i].debugCol;
        }

        offsetCount += CrystalInfoBuffer[i].indicesCount;
        offsetVerts += CrystalInfoBuffer[i].verticesCount;
    }
    

}
